{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Footer.js","App.js","index.js"],"names":["Titles","react_default","a","createElement","id","Form","props","className","onSubmit","getWeather","htmlFor","type","name","placeholder","Weather","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeUnit","e","target","classList","contains","document","querySelector","add","remove","value","setState","unit","kelvinToCelcius","temperature","parseFloat","toFixed","kelvinToFarenheit","state","inherits","createClass","key","city","country","img","src","alt","description","role","onClick","temp_min","temp_max","humidity","error","React","Component","Footer","href","title","API_KEY","App","undefined","_callee","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","elements","fetch","concat","sent","json","main","temp","sys","weather","getImage","stop","components_Titles","components_Form","components_Weather","components_Footer","descriptionID","URL","toString","charAt","console","log","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.8a889fd0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n  <div id=\"page-header\">\r\n    <h1>Outside</h1>\r\n    <h2>Weather Stats</h2>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <div className=\"location-form form-group\">\r\n    <form onSubmit={props.getWeather}>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <label className=\"sr-only\" htmlFor=\"city\">\r\n            Enter a city.\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"city\"\r\n            className=\"form-control\"\r\n            name=\"city\"\r\n            placeholder=\"City...\"\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          <label className=\"sr-only\" htmlFor=\"country\">\r\n            Enter a country.\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"country\"\r\n            className=\"form-control\"\r\n            name=\"country\"\r\n            placeholder=\"Country...\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nexport class Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      unit: \"C\"\r\n    };\r\n  }\r\n\r\n  changeUnit = e => {\r\n    // Change button styles\r\n    if (e.target.classList.contains(\"btn-outline-light\")) {\r\n      // Switch button styles on other button\r\n      document.querySelector(\".btn-light\").classList.add(\"btn-outline-light\");\r\n      document\r\n        .querySelector(\".btn-light.btn-outline-light\")\r\n        .classList.remove(\"btn-light\");\r\n      // then the clicked button\r\n      e.target.classList.remove(\"btn-outline-light\");\r\n      e.target.classList.add(\"btn-light\");\r\n    }\r\n    // Change to celcius\r\n    if (e.target.value === \"celcius\") {\r\n      return this.setState({ unit: \"C\" });\r\n    }\r\n    // Change to Farenheit\r\n    if (e.target.value === \"farenheit\") {\r\n      return this.setState({ unit: \"F\" });\r\n    }\r\n  };\r\n\r\n  kelvinToCelcius = temperature => {\r\n    return parseFloat((temperature - 273.15).toFixed(1));\r\n  };\r\n  kelvinToFarenheit = temperature => {\r\n    return parseFloat(((temperature - 273.15) * (9 / 5) + 32).toFixed(1));\r\n  };\r\n\r\n  render() {\r\n    const state = this.state;\r\n    const props = this.props;\r\n    return (\r\n      <div className=\"weather-stats\">\r\n        {/* Location */}\r\n        {props.city && props.country && (\r\n          <p className=\"location\">\r\n            {props.city}, {props.country}\r\n          </p>\r\n        )}\r\n        <div className=\"row\">\r\n          <div className=\"col-sm\">\r\n            {/* Image */}\r\n            {props.img && (\r\n              <p className=\"image-wrapper\">\r\n                <img src={props.img} alt={props.description} />\r\n              </p>\r\n            )}\r\n            {/* Description */}\r\n            {props.description && (\r\n              <p>\r\n                <span className=\"description\">{props.description}</span>\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"col-sm\">\r\n            {/* Change Temperature Unit*/}\r\n            {props.temperature && (\r\n              <div className=\"changeUnit\">\r\n                <div className=\"btn-group\" role=\"group\">\r\n                  <button\r\n                    onClick={this.changeUnit}\r\n                    type=\"button\"\r\n                    className=\"btn btn-light\"\r\n                    value=\"celcius\"\r\n                  >\r\n                    Â°C\r\n                  </button>\r\n                  <button\r\n                    onClick={this.changeUnit}\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-light\"\r\n                    value=\"farenheit\"\r\n                  >\r\n                    Â°F\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* Temperature */}\r\n            {props.temperature && state.unit && (\r\n              <p className=\"current-temperature\">\r\n                {state.unit === \"C\" &&\r\n                  this.kelvinToCelcius(props.temperature) + \"Â°C\"}\r\n                {state.unit === \"F\" &&\r\n                  this.kelvinToFarenheit(props.temperature) + \"Â°F\"}\r\n              </p>\r\n            )}\r\n            {/* Min and Max Temperature */}\r\n            {props.temp_min && props.temp_max && (\r\n              <p>\r\n                <span className=\"minmax\">\r\n                  Min:{\" \"}\r\n                  {state.unit === \"C\" &&\r\n                    this.kelvinToCelcius(props.temp_min) + \"Â°C\"}\r\n                  {state.unit === \"F\" &&\r\n                    this.kelvinToFarenheit(props.temp_min) + \"Â°F\"}\r\n                  <br /> Max:{\" \"}\r\n                  {state.unit === \"C\" &&\r\n                    this.kelvinToCelcius(props.temp_max) + \"Â°C\"}\r\n                  {state.unit === \"F\" &&\r\n                    this.kelvinToFarenheit(props.temp_max) + \"Â°F\"}\r\n                </span>\r\n              </p>\r\n            )}\r\n            {/* Humidity */}\r\n            {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n          </div>\r\n        </div>\r\n        {/* Errors */}\r\n        {props.error && <p>{props.error}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n  <div id=\"page-footer\">\r\n    <p>\r\n      <a href=\"http://jimfarrugia.com\" title=\"Jim Farrugia's Portfolio\">\r\n        By Jim Farrugia\r\n      </a>\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"./App.css\";\r\n\r\nconst API_KEY = \"209534645722eb9b2c001a7df46d6eef\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    temp_min: undefined,\r\n    temp_max: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    img: undefined,\r\n    error: undefined\r\n  };\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\r\n    );\r\n    const data = await api_call.json();\r\n\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        temp_min: data.main.temp_min,\r\n        temp_max: data.main.temp_max,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity + \"%\",\r\n        description: data.weather[0].description,\r\n        img: getImage(data.weather[0].id),\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        temp_min: undefined,\r\n        temp_max: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        img: undefined,\r\n        error: \"Please enter a location.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Titles />\r\n        <div className=\"container\">\r\n          <Form getWeather={this.getWeather} />\r\n          <Weather\r\n            temperature={this.state.temperature}\r\n            temp_min={this.state.temp_min}\r\n            temp_max={this.state.temp_max}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            img={this.state.img}\r\n            error={this.state.error}\r\n          />\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n    Function:   getImage\r\n    Arguments:  descriptionID\r\n    Desc:       A descriptionID is passed in and if it matches the id of a weather description in the API, a relevant image url will be returned. If the conditions are not meant, log to the console.\r\n*/\r\nconst getImage = descriptionID => {\r\n  let URL = \"\";\r\n  // 800: Clear\r\n  if (descriptionID === 800) {\r\n    return (URL = \"img/sun.svg\");\r\n  }\r\n  // 801: Few Clouds\r\n  if (descriptionID === 801) {\r\n    return (URL = \"img/cloud-and-sun.svg\");\r\n  }\r\n  // 80x: Clouds, 7xx: Atmosphere (haze, mist, etc)\r\n  if (\r\n    descriptionID.toString().charAt(0) === \"8\" ||\r\n    descriptionID.toString().charAt(0) === \"7\"\r\n  ) {\r\n    return (URL = \"img/cloud.svg\");\r\n  }\r\n  // 6xx: Snow\r\n  if (descriptionID >= 615) {\r\n    return (URL = \"img/snowstorm.svg\");\r\n  }\r\n  if (descriptionID >= 600) {\r\n    return (URL = \"img/snow.svg\");\r\n  }\r\n  // 5xx: Rain\r\n  if (descriptionID >= 500) {\r\n    return (URL = \"img/rain.svg\");\r\n  }\r\n  // 3xx: Drizzle\r\n  if (descriptionID >= 300) {\r\n    return (URL = \"img/rain-and-sun.svg\");\r\n  }\r\n  // 2xx: Thunderstorm\r\n  if (descriptionID >= 200) {\r\n    return (URL = \"img/thunderstorm.svg\");\r\n  }\r\n  return console.log(\r\n    \"Could not match current conditions with image. URL: \" + URL\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}